services:
  postgres:
    image: postgres:16
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: meteor
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres -d meteor']
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 10s
      start_interval: 2s
    command: postgres -c shared_buffers=2048MB -c effective_cache_size=4096MB -c maintenance_work_mem=256MB -c work_mem=32MB
    networks:
      - app-network

  cobalt-api:
    image: ghcr.io/imputnet/cobalt:10
    container_name: cobalt-api
    init: true
    read_only: true
    restart: unless-stopped
    environment:
      API_URL: 'http://cobalt-api:9000'
    labels:
      - com.centurylinklabs.watchtower.scope=cobalt
    healthcheck:
      test: ['CMD-SHELL', 'wget --spider --quiet --tries=1 http://localhost:9000']
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 10s
      start_interval: 2s
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 256M

  cobalt-watchtower:
    image: ghcr.io/containrrr/watchtower:latest
    container_name: cobalt-watchtower
    restart: unless-stopped
    command: --cleanup --scope cobalt --schedule "0 0 1 * * *" --include-restarting
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      resources:
        limits:
          memory: 64M

  app:
    build:
      context: .
      target: release
    container_name: app
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/meteor?schema=public&connect_timeout=300
      COBALT_API_URL: http://cobalt-api:9000
      NODE_ENV: production
      DISCORD_TOKEN: ${DISCORD_TOKEN}
    depends_on:
      postgres:
        condition: service_healthy
      cobalt-api:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 512M
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
